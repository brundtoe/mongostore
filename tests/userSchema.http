GET http://localhost:3000/users

> {% client.test("Request executed successfully", function() {
  client.assert(response.status === 200, "Response status is not 200")
  client.assert(response.body === "respond with a resource","Response text i not respone with a resource")
     })
  %}

###
POST http://localhost:3000/users
Content-Type: application/json

{
  "username": "abc",
  "birth_year": 1994,
  "password": "secret",
  "repeat_password": "secret",
  "email": "jens@mail.com"
}

> {% client.test("Request executed successfully", function() {
  client.assert(response.status === 201, "Response status is not 201")
  client.assert(response.body.email == "jens@mail.com", "Response email should be 'jens@email.com'")
     })
  %}

###
POST http://localhost:3000/users
Content-Type: application/json

{
  "username": "abc",
  "birth_year": 1994,
  "password": "secret",
  "email": "jens@mail.com"
}

> {% client.test("Should fail due to missing field repeat_password", function () {
  client.assert(response.status === 400, "Response status is not 400")
  var message = '"password" missing required peer "repeat_password"'
  client.assert(response.body.details[0].message === message, "Response is not  as expected")
     })
  %}

###
POST http://localhost:3000/users
Content-Type: application/json

{
  "username": "abc",
  "birth_year": 1994,
  "password": "secret",
  "email": "jens@mail.com",
  "dummyField": "illegal field"
}

> {% client.test("Should fail due to field not allowed", function () {
  client.assert(response.status === 400, "Response status is not 400")
  var message = '"dummyField" is not allowed'
  client.assert(response.body.details[0].message === message, "Response is not  as expected")
     })
  %}

###
PUT http://localhost:3000/users
Content-Type: application/json

{
  "_id": "5ef5fe157022575df4042249",
  "username": "abc",
  "birth_year": 1994,
  "email": "jens@mail.com"
}

> {% client.test("Request failed missing repeat_password", function () {
     client.assert(response.status === 201, "Response status is not 201")
     client.assert(response.body.email == "jens@mail.com", "Response email should be 'jens@email.com'")
     })
  %}

###
PUT http://localhost:3000/users
Content-Type: application/json

{
  "_id": "5ef5fe157022575df4042249",
  "username": "abc",
  "birth_year": 1994
}

> {% client.test("Should fail due to missing email", function () {
     client.assert(response.status === 400, "Response status is not 400")
     var message = '"username" missing required peer "email"'
     client.assert(response.body.details[0].message === message, "Response is not  as expected")
     })
  %}
