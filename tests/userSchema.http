GET http://localhost:3000/customers

> {% client.test("Request executed successfully", function() {
  client.assert(response.status === 200, "Response status is not 200")
  client.assert(response.body.data.length === 6,"Response should have returned 6 users")
     })
  %}

###
GET http://localhost:3000/customers/21

> {% client.test("Request executed successfully", function() {
  client.assert(response.status === 200, "Response status is not 200")
  client.assert(response.body.data.mail === "pwjones@anymail.com" ,"Response should have returned ''6 customers")
     })
  %}

###
POST http://localhost:3000/customers
Content-Type: application/json

{
  "name": "Kristian Hansen",
  "city": "Horsens",
  "state": "Østjylland",
  "country": "DK",
  "mail": "kristian@example.com"
}

> {% client.test("Request executed successfully", function() {
  client.assert(response.status === 201, "Response status is not 201")
  client.global.set('kristian_id',response.body.data.user.id)
     })
  %}

### delete again
DELETE http://localhost:3000/customers/{{kristian_id}}

> {% client.test("Request executed successfully", function() {
  client.assert(response.status === 200, "Response status is not 200")
  var user_id = client.global.get('kristian_id')
  client.assert(response.body.data.value.id == user_id,"Response should have been deleted")
     })
  %}

### Kun de krævede felter
POST http://localhost:3000/customers
Content-Type: application/json

{
  "name": "Maria Jensen",
  "city": "Svendborg",
  "mail": "maria@example.com"
}

> {% client.test("Request executed successfully", function() {
  client.assert(response.status === 201, "Response status is not 201")
  client.global.set('maria_id',response.body.data.user.id)
     })
  %}

###
DELETE http://localhost:3000/customers/{{maria_id}}

> {% client.test("Request executed successfully", function() {
  client.assert(response.status === 200, "Response status is not 200")
  var user_id = client.global.get('maria_id')
  client.assert(response.body.data.value.id == user_id,"Response should have been deleted")
     })
  %}

###
PUT http://localhost:3000/customers
Content-Type: application/json

{
  "_id": "5eef84a264ee594e266c8e2c",
  "id": 29,
  "name": "Christian Johnson",
  "city": "Swindon",
  "country": "UK",
  "mail": "christian@johnson.nu"

}

> {% client.test("Request failed missing repeat_password", function () {
     client.assert(response.status === 201, "Response status is not 201")
     client.assert(response.body.value.name === "Christian Johnson", "Response name should be Christian Johnson")
     client.assert(response.body.value.city === "Swindon", "Response city should be Swindon")
     client.assert(response.body.value.state === null, "Response state should be null")
     client.assert(response.body.value.country === "UK", "Response country should be UK")
     client.assert(response.body.value.mail === "christian@johnson.nu", "Response mail should be christian@johnson.nu")
     })
  %}

###
PUT http://localhost:3000/customers
Content-Type: application/json

{
  "_id": "5eef84a264ee594e266c8e2c",
  "id": 29,
  "name": "christina masterson",
  "city": "petersburgh",
  "state": "pensylvania",
  "mail": "christina@masterson.nu"

}

> {% client.test("Request failed missing repeat_password", function () {
     client.assert(response.status === 201, "Response status is not 201")
          client.assert(response.body.value.name === "christina masterson", "Response name should be christina  masterson")
     client.assert(response.body.value.city === "petersburgh", "Response city should be peterburgh")
     client.assert(response.body.value.state === "pensylvania", "Response state should be pensylvania")
     client.assert(response.body.value.country === null, "Response country should be null")
     client.assert(response.body.value.mail == "christina@masterson.nu", "Response email should be 'christina@masterson.nu'")
     })
  %}
