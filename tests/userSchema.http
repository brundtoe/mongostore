GET http://localhost:3000/users

> {% client.test("Request executed successfully", function() {
  client.assert(response.status === 200, "Response status is not 200")
  client.assert(response.body.data.length === 6,"Response should have returned 6 users")
     })
  %}

### alle felter er udfyldt
POST http://localhost:3000/users
Content-Type: application/json

{
  "name": "Kristian Hansen",
  "city": "Horsens",
  "state": "Østjylland",
  "country": "DK",
  "mail": "kristian@example.com"
}

> {% client.test("Request executed successfully", function() {
  client.assert(response.status === 201, "Response status is not 201")
  client.assert(response.body.data.mail == "kristian@example.com", "Response email should be 'kristian@example.com'")
     })
  %}

### Kun de krævede felter
POST http://localhost:3000/users
Content-Type: application/json

{
  "name": "Kristian Hansen",
  "city": "Horsens",
  "mail": "kristian@example.com"
}

> {% client.test("Should fail due to missing field repeat_password", function () {
  client.assert(response.status === 201, "Response status is not 201")
  client.assert(response.body.data.mail == "kristian@example.com", "Response email should be 'kristian@example.com'")
     })
  %}

### med illegalt felt
POST http://localhost:3000/users
Content-Type: application/json

{
  "name": "Kristian Hansen",
  "city": "Horsens",
  "state": "Østjylland",
  "country": "DK",
  "mail": "kristian@example.com",
  "dummy": "Illegal field"

}

> {% client.test("Should fail due to field not allowed", function () {
  client.assert(response.status === 400, "Response status is not 400")
  var message = '"dummy" is not allowed'
  client.assert(response.body.details[0].message === message, "Response is not  as expected")
     })
  %}

###
PUT http://localhost:3000/users
Content-Type: application/json

{
  "_id": "5eef84a264ee594e266c8e2c",
  "id": 29,
  "name": "christina masterson",
  "city": "petersbourgh",
  "state": "pensylvania",
  "country": "USA",
  "mail": "christina@masterson.nu"

}

> {% client.test("Request failed missing repeat_password", function () {
     client.assert(response.status === 201, "Response status is not 201")
     client.assert(response.body.data.mail == "christina@masterson.nu", "Response email should be 'christina@masterson.nu'")
     })
  %}

###
PUT http://localhost:3000/users
Content-Type: application/json

{
  "_id": "5eef84a264ee594e266c8e2c",
  "id": 29,
  "city": "petersbourgh",
  "state": "pensylvania",
  "country": "USA",
  "mail": "christina@masterson.nu"



}

> {% client.test("Should fail due to missing email", function () {
     client.assert(response.status === 400, "Response status is not 400")
     var message = '"name" is required'
     client.assert(response.body.details[0].message === message, "Response is not  as expected")
     })
  %}

###
DELETE http://localhost:3000/users/29

> {% client.test("Request executed successfully", function() {
  client.assert(response.status === 200, "Response status is not 200")
  client.assert(response.body.success === "users delete function","Response should have returned 'users delete function'")
     })
  %}
