GET http://localhost:3000/books

> {% client.test("Request executed successfully", function() {
  client.assert(response.status === 200, "Response status is not 200")
  client.assert(response.body.data.length === 3,"Response should have returned 3 books")
     })
  %}

###
GET http://localhost:3000/books/15

> {% client.test("Request executed successfully", function() {
  client.assert(response.status === 200, "Response status is not 200")
  var title = "Professional Java Xml Programming With Servlets An"
  client.assert(response.body.data.title === title,"Response should have returned correct title")
     })
  %}

###
POST http://localhost:3000/books
Content-Type: application/json

{
  "author_id": 29,
  "title": "MongoDB Ultimate Guide",
  "published": "2020-06-24T12:00:00Z",
  "bookprice": 34.75,
  "isbn": "8797435321",
  "onhand": 2
}

> {% client.test("Request executed successfully", function() {
  client.assert(response.status === 201, "Response status is not 201")
  client.assert(response.body.data.insertedCount === 1,"Response should be one document inserted")
  client.assert(response.body.data.book.author_id === 29, "Response should have returned author_id = 29")
  client.assert(response.body.data.book.title === "MongoDB Ultimate Guide", "Response should have returned title=MongoDB Ultimate Guide")
  client.assert(response.body.data.book.published === "2020-06-24T12:00:00Z", "Response should have returned published = 2020-06-24T12:00:00Z")
  client.assert(response.body.data.book.bookprice === 34.75, "Response should have returned bookprice 34.75 ")
  client.assert(response.body.data.book.isbn === "8797435321", "Response should have returned isbn 8797435321 ")
  client.assert(response.body.data.book.onhand === 2, "Response should have returned onhand 2")
  client.global.set('title_id',response.body.data.book.id)
     })
  %}

###
DELETE http://localhost:3000/books/{{title_id}}

> {% client.test("Request executed successfully", function() {
  client.assert(response.status === 200, "Response status is not 200")
  var title_id = client.global.get('title_id')
  client.assert(response.body.data.value.id == title_id,"Response should have been deleted book")
     })
  %}

###
PUT http://localhost:3000/books
Content-Type: application/json

{
  "_id": "5eef84a264ee594e266c8df0",
  "id": 18,
  "author_id": 6,
  "title": "Beginning MEAN apps",
  "published": "2019-11-30T23:00:00.000Z",
  "bookprice": 15.49,
  "isbn": "1861003254",
  "onhand": 5
}

> {% client.test("Request executed successfully", function() {
  client.assert(response.status === 201, "Response status is not 201")
  var title = "Beginning MEAN apps"
  client.assert(response.body.value.author_id === 6, "Response should have returned author_id = 6")
  client.assert(response.body.value.title === title, "Response should have returned title=Beginning MEAN apps")
  client.assert(response.body.value.published === "2019-11-30T23:00:00.000Z", "Response should have returned published = 2019-11-30T23:00:00.000Z")
  client.assert(response.body.value.bookprice === 15.49, "Response should have returned bookprice 15.49 ")
  client.assert(response.body.value.isbn === "1861003254", "Response should have returned isbn 1861003254 ")
  client.assert(response.body.value.onhand === 5, "Response should have returned onhand 5")
     })
  %}

### restore original values
PUT http://localhost:3000/books
Content-Type: application/json

{
  "_id": "5eef84a264ee594e266c8df0",
  "id": 18,
  "author_id": 17,
  "title": "Beginning Active Server Pages 3.0",
  "published": "1999-11-30T23:00:00.000Z",
  "bookprice": 28.99,
  "isbn": "1861003382",
  "onhand": 54
}

> {% client.test("Request executed successfully", function() {
  client.assert(response.status === 201, "Response status is not 201")
  var title = "Beginning Active Server Pages 3.0"
  client.assert(response.body.value.author_id === 17, "Response should have returned author_id = 17")
  client.assert(response.body.value.title === title, "Response should have returned title=Beginning Active...")
  client.assert(response.body.value.published === "1999-11-30T23:00:00.000Z", "Response should have returned published = 1999-11-30T23:00:00.000Z")
  client.assert(response.body.value.bookprice === 28.99, "Response should have returned bookprice 28.99 ")
  client.assert(response.body.value.isbn === "1861003382", "Response should have returned isbn 8797435321 ")
  client.assert(response.body.value.onhand === 54, "Response should have returned onhand 54")
     })
  %}

