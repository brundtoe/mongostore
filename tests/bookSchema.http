GET http://localhost:3000/books

> {% client.test("Request executed successfully", function() {
  client.assert(response.status === 200, "Response status is not 200")
  client.assert(response.body.data.length === 3,"Response should have returned 3 books")
     })
  %}

###
GET http://localhost:3000/books/15

> {% client.test("Request executed successfully", function() {
  client.assert(response.status === 200, "Response status is not 200")
  var title = "Professional Java Xml Programming With Servlets An"
  client.assert(response.body.data.title === title,"Response should have returned correct title")
     })
  %}

###
GET http://localhost:3000/books/jensen

> {% client.test("Request fails jensen should be a number", function() {
  client.assert(response.status === 400, "Response status is not 200")
  var message = "\"value\" must be a number"
  client.assert(response.body.details[0].message === message,"Response should have returned correct messsage")
     })
  %}

###
POST http://localhost:3000/books
Content-Type: application/json

{
  "author_id": 29,
  "title": "MongoDB Ultimate Guide",
  "published": "2020-06-24T12:00:00Z",
  "bookprice": 34.75,
  "isbn": "8797435321",
  "onhand": 2
}

> {% client.test("Request executed successfully", function() {
  client.assert(response.status === 201, "Response status is not 201")
  client.assert(response.body.data.title === "MongoDB Ultimate Guide","Response should have returned correct title")
     })
  %}

###
POST http://localhost:3000/books
Content-Type: application/json

{
  "author_id": 29,
  "title": "MongoDB Ultimate Guide",
  "published": "2020-06-24T12:00:00Z",
  "isbn": "8797435321",
  "onhand": 2
}

> {% client.test("Request fails dyue to missing field bookprice", function() {
  client.assert(response.status === 400, "Response status is not 400")
  var message = "\"title\" missing required peer \"bookprice\""
  client.assert(response.body.details[0].message === message,"Response should have returned missing field bookprice")
     })
  %}

###
POST http://localhost:3000/books
Content-Type: application/json

{
  "author_id": 29,
  "title": "MongoDB Ultimate Guide",
  "published": "2020-06-24T12:00:00Z",
  "bookprice": 34.75,
  "isbn": "8797435321",
  "onhand": 2,
  "dummy": "illegal field"
}

> {% client.test("Request fails due to illegal field dummy", function() {
  client.assert(response.status === 400, "Response status is not 400")
  var message = "\"dummy\" is not allowed"
  client.assert(response.body.details[0].message === message,"Response should have returned missing field bookprice")
     })
  %}

###
PUT http://localhost:3000/books
Content-Type: application/json

{
  "_id": "5eef84a264ee594e266c8df0",
  "id": 18,
  "author_id": 5,
  "title": "Beginning Active Server Pages 3.0",
  "published": "1999-11-30T23:00:00.000Z",
  "bookprice": 28.99,
  "isbn": "1861003382",
  "onhand": 54
}

> {% client.test("Request executed successfully", function() {
  client.assert(response.status === 201, "Response status is not 201")
  var title = "Beginning Active Server Pages 3.0"
  client.assert(response.body.data.title === title,"Response should have returned correct title")
     })
  %}

###
PUT http://localhost:3000/books
Content-Type: application/json

{
  "_id": "5eef84a264ee594e266c8df0",
  "id": 18,
  "title": "Beginning Active Server Pages 3.0",
  "published": "1999-11-30T23:00:00.000Z",
  "bookprice": 28.99,
  "isbn": "1861003382",
  "onhand": 54
}

> {% client.test("Request fails due to misisng field author_id", function() {
  client.assert(response.status === 400, "Response status is not 400")
  var message = "\"author_id\" is required"
  client.assert(response.body.details[0].message === message,"Response should have correct error message")
     })
  %}

###
DELETE http://localhost:3000/books/15

> {% client.test("Request executed successfully", function() {
  client.assert(response.status === 200, "Response status is not 200")
  client.assert(response.body.success === 'Books delete function',"Response should have returned correct title")
     })
  %}

###
DELETE http://localhost:3000/books/jensen

> {% client.test("Request should fail jensen should be a number", function() {
  client.assert(response.status === 400, "Response status is not 400")
  var message = '"value" must be a number'
  client.assert(response.body.details[0].message === message,"Response should have returned empty")
     })
  %}
