GET http://localhost:3000/authors

> {% client.test("Request executed successfully", function() {
  client.assert(response.status === 200, "Response status is not 200")
  client.assert(response.body.data.length == 29,"Response should have returned 4 authors")
     })
  %}

###

GET http://localhost:3000/authors/12

> {% client.test("Request executed successfully", function() {
  client.assert(response.status === 200, "Response status is not 200")
  client.assert(response.body.data.mail === 'Gross@mail.com',"Response should have returned Gross@mail.com")
     })
  %}

###
GET http://localhost:3000/authors/121

> {% client.test("Request should fail no author with number 121", function() {
  client.assert(response.status === 200, "Response status is not 200")
  client.assert(response.body.data === null,"Response should have returned null")
     })
  %}


###
POST http://localhost:3000/authors
Content-Type: application/json

{
  "firstname": "Karin",
  "lastname": "Andersen",
  "mail": "karin@example.com"
}

> {% client.test("Request executed successfully", function() {
  client.assert(response.status === 201, "Response status is not 201")
  client.assert(response.body.data.author.firstname === "Karin", "Response should have returned Karin")
  client.assert(response.body.data.author.lastname === "Andersen", "Response should have returned Karin")
  client.assert(response.body.data.author.mail === "karin@example.com","Response should have returned 'karin@example.com")
  client.global.set('karin_id',response.body.data.author.id)
     })
  %}

###
DELETE http://localhost:3000/authors/{{karin_id}}

> {% client.test("Request executed successfully", function() {
  client.assert(response.status === 200, "Response status is not 200")
  var author_id = client.global.get('karin_id')
  client.assert(response.body.data.value.id == author_id,"Response should have been deleted")
     })
  %}

###
PUT http://localhost:3000/authors
Content-Type: application/json

{
  "_id": "5eef84a264ee594e266c8dd3",
  "id": 29,
  "firstname": "Jens",
  "lastname": "Olsen",
  "mail": "jens@example.com"
}

> {% client.test("Request executed successfully", function() {
  client.assert(response.status === 201, "Response status is not 201")
  client.assert(response.body.value.firstname === "Jens","Response should have firstname Jens")
  client.assert(response.body.value.lastname === "Olsen","Response should have last name Olsen")
  client.assert(response.body.value.mail === "jens@example.com","Response should have mail jens@example.com")
     })
  %}

### reset values i database
PUT http://localhost:3000/authors
Content-Type: application/json

{
  "_id": "5eef84a264ee594e266c8dd3",
  "id": 29,
  "firstname": "Jesse",
  "lastname": "Liberty",
  "mail": "Liberty@example.com"
}

> {% client.test("Request executed successfully", function() {
  client.assert(response.status === 201, "Response status is not 201")
  client.assert(response.body.value.firstname === "Jesse","Response should have firstname Jesse")
  client.assert(response.body.value.lastname === "Liberty","Response should have last name Liberty")
  client.assert(response.body.value.mail === "Liberty@example.com","Response should have mail Liberty@example.com")
     })
  %}

